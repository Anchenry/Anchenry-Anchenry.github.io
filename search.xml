<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【QT+SQLite】实现大学生课程学习管理与成绩评价系统整体设计</title>
    <url>/2023/10/13/%E4%B8%AA%E4%BA%BA%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="0-写在最前面"><a href="#0-写在最前面" class="headerlink" title="0. 写在最前面"></a>0. 写在最前面</h2><p>本次设计的程序是数据库与空间数据课程的课程设计成果，基于QT 5.9.0 MinGW 32bit使用Qt Creator4.3.0，数据库使用了Navicat 12 for SQLite 。那么两个软件的具体安装方法此处不再赘述，下面的程序设计介绍过程中也默认各位看官已经安装好了编译器和数据库，安装的方法看官们可以参考其他博主的文章进行安装。看官们也可以参照B站的讲解视频进行开发，[<a class="link"   href="https://www.bilibili.com/video/BV1pP4y1E7XM/?spm_id_from=333.999.0.0&vd_source=b9657dcf6a633f6c2d6ecf3a0f99acb9%5D%EF%BC%8CUP%E4%B8%BB%E8%AE%B2%E8%A7%A3%E7%9A%84%E6%AF%94%E8%BE%83%E4%BB%94%E7%BB%86%EF%BC%8C%E5%9C%A8%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%B9%9F%E6%9C%89%E5%BE%88%E5%A4%9A%E9%83%A8%E5%88%86%E5%8F%82%E8%80%83%E4%BA%86%E8%A7%86%E9%A2%91%E4%B8%AD%E7%9A%84%E5%81%9A%E6%B3%95%E3%80%82" >https://www.bilibili.com/video/BV1pP4y1E7XM/?spm_id_from=333.999.0.0&amp;vd_source=b9657dcf6a633f6c2d6ecf3a0f99acb9]，UP主讲解的比较仔细，在程序设计的过程中也有很多部分参考了视频中的做法。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>程序的完整程序链接在文章置顶，大家有需要可以付费下载。另外，这是本系列的第一篇文章，仅从整体设计的角度让看官们知晓需要系统需要实现的内容及大概的实现路径，后续内容会陆续更新。</p>
<h2 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h2><p>大学生课程学习管理与成绩评价系统主要用于给教师提供查询系、班级、学生基础信息、教师基础信息、学生选课信息、学生绩点信息，对信息进行维护以及通过教学楼平面图选择教室等功能；为学生提供选课以及校园导航等功能。</p>
<h2 id="（1）功能需求："><a href="#（1）功能需求：" class="headerlink" title="（1）功能需求："></a>（1）功能需求：</h2><p>创建大学生课程学习管理与成绩评价系统，选择教师端登录可以实现对教师、学生、系、课程等基础信息的维护和查询，以及对学生课程成绩、学分情况、教师授课情况和学生选课情况的查询；选择学生端登入可以进行学生选课，查询已经选择的课程和未被选择的课程。同时需要对学生成绩进行成绩评价，设计学生的绩点数据模型，每门课程分数对应有不同的绩点，通过计算规则，系统能够自动对参加学习的所有学生进行绩点统计和排名，能够按照班级对学生的平均绩点情况进行统计输出和分析。在教师录入课程信息时，可通过交互平面图选择课程教室。并且可以通过选定课程，自动跳转所在教室位置。在学生选课时，基于建立的学校空间数据，完成学校各教学设施的地图查询，同时提供路径指引，给出从宿舍到教室的最短路径。 </p>
<h2 id="（2）信息需求"><a href="#（2）信息需求" class="headerlink" title="（2）信息需求"></a>（2）信息需求</h2><p>教师属性有工作证号、姓名、职称、电话，学生属性有学号、姓名、性别、出生年月，系属性有系代号、系名和系办公室电话，课程属性有课序号、课名、课程类型、学分、上课时间及名额，课程类型分为基础必修、专业必修和选修三个类型，教室属性有教室号码、层数、容纳人数、教室的空间位置等信息。同时每个学生都属于一个班，每个班都属于一个系，每个教师也都属于一个系。一名教师可以教多门课，一门课可以有几位主讲老师，一名同学可以选多门课，一门课可被若干同学选中，每门课的学生人数有上限。一名同学选中的课若已学完，应该录入相应的成绩。本单位学生、教师可能存在重名，工作证号、学号作为标识。</p>
<h2 id="（3）环境要求"><a href="#（3）环境要求" class="headerlink" title="（3）环境要求"></a>（3）环境要求</h2><p>大学生课程学习管理与成绩评价系统采用C&#x2F;S架构，即客户端&#x2F;服务器体系结构，服务器负责数据的存储与管理，客户端负责完成与用户的交互任务，通过可视化图形界面，展示学生管理系统，并通过可视化图形界面中的按键、输入框等组件实现数据的展现、增加、删除、修改等功能，服务器与客户端都位于个人电脑。</p>
<h2 id="2-概念设计"><a href="#2-概念设计" class="headerlink" title="2. 概念设计"></a>2. 概念设计</h2><h2 id="（1）概念模型（E-R-图）"><a href="#（1）概念模型（E-R-图）" class="headerlink" title="（1）概念模型（E-R 图）"></a>（1）概念模型（E-R 图）</h2><p>大学生课程学习管理与成绩评价系统的实体集有“系”、“班级”、“学生”、“教师”、“课程”、“教室”、“课程类型”。每个班都属于一个系，每个教师也都属于一个系,所以系对班级、教师为一对多的关系；每个学生都属于一个班，班级对学生为一对多的关系；一名教师可以教多门课，一门课可以有几位主讲老师，教师与课程为多对多的关系；一名同学可以选多门课，一门课可被若干同学选中，学生与课程为多对多的关系；课程与教室进行交互式连接，为一对一的关系；课程只能有一种课程类型，课程与课程类型为一对一的关系。<br>对每个实体定义的属性如下，实体的码用下划线划出：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">系：&#123;系代号，系名，系办公室电话&#125;</span><br><span class="line">班级：&#123;班号&#125;</span><br><span class="line">学生：&#123;学号，姓名，性别，出生年月，登入密码&#125;</span><br><span class="line">教师：&#123;工作证号，姓名，职称，电话，登入密码&#125;</span><br><span class="line">课程：&#123;课名，课程号，上课时间，课程类型，学分，名额&#125;</span><br><span class="line">教室：&#123;教室号，层数，容纳人数，教室空间位置&#125;</span><br><span class="line">课程性质：&#123;基础必修，专业必修，选修&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="（2）数据字典："><a href="#（2）数据字典：" class="headerlink" title="（2）数据字典："></a>（2）数据字典：</h2><p>数据字典中的数据项主要是字符串型和整型。<br>数据项：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">系代号&#123;de_num,CHAR,<span class="number">60</span>&#125;，系名&#123;de_name,TEXT&#125;，系办公室电话&#123;de_tel,CHAR,<span class="number">60</span>&#125;</span><br><span class="line">班级&#123;cl_num,CHAR,<span class="number">60</span>&#125;</span><br><span class="line">学号&#123;stu_num,CHAR,<span class="number">60</span>&#125;，姓名&#123;stu_name,TEXT&#125;，性别&#123;stu_gender,TEXT&#125;，出生年份&#123;birth_year,INT&#125;，出生月份&#123;birth_month,INT&#125;</span><br><span class="line">工作证号&#123;te_num,CHAR,<span class="number">60</span>&#125;，姓名&#123;te_name,TEXT&#125;，职称&#123;te_tel,TEXT&#125;，电话&#123;te_tel,TEXT&#125;</span><br><span class="line">课名&#123;le_num,CHAR,<span class="number">60</span>&#125;，课程号&#123;le_name,TEXT&#125;，课程类型&#123;le_type,CHAR,<span class="number">32</span>&#125;，学分&#123;le_credit,real&#125;，上课时间&#123;le_time,TEXT&#125;，名额&#123;le_people,BIGINT&#125;</span><br><span class="line">教室号码&#123;cr_num,CHAR,<span class="number">60</span>&#125;，层数&#123;cr_floor,INT&#125;，容纳人数&#123;cr_commit,INT&#125;</span><br></pre></td></tr></table></figure></div>

<p>大学生课程学习管理与成绩评价系统采用了关系模型作为数据库的逻辑模型，在设计完成校园导航功能时利用了空间数据来构建了无向图实现最短路径的查询。同时对每个关系均设置了主键和外键约束。<br>本系统的数据流图的第一层分解图如图3，课程性质和教室授课情况等数据不需要进行更改，所以在设计系统之前通过SQL语句预先存放在了数据库中，其余的大部分数据都可由教师（管理员）或学生进行维护，实现增加、删除、修改数据。<br>本系统可以实现的数据处理有：学生选课、校园导航、系班级信息查询维护、学生基础信息查询和维护、学生选课情况查询及成绩录入、学生学业情况查询、教师基本信息查询和维护、教师授课信息查询、课程信息查询和维护。<br>需要存储的数据有：校园空间信息、学生选课及成绩信息、教师基本信息、教师授课信息、课程信息、系班级信息、学生基础信息等。<br>本系统的外部项及数据的提供者和使用者为学生和教师（管理员）。<br>其中较复杂的是处理是P1.9课程信息查询和维护，需要通过教学楼的平面图实现在录入课程信息时通过交互平面图选择课程教室，并且还可以通过选定课程自动跳转所在教室的位置，以及完成课程信息的增加、删除、修改等维护。DFD分解图如下：</p>
<h2 id="3-逻辑结构设计"><a href="#3-逻辑结构设计" class="headerlink" title="3. 逻辑结构设计"></a>3. 逻辑结构设计</h2><p>“系”实体集和“班级”实体集用“属于”联系关联，联系的基数是1：n,根据转换规则与n端对应的关系模式合并，得到2个关系模式：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">关系<span class="number">1</span>：系（系代号，系名，系办公室电话）</span><br><span class="line">关系<span class="number">2</span>：班级（班号，系代号） 系代号设置为外键</span><br></pre></td></tr></table></figure></div>

<p>“系”实体集和“教师”实体集为1对多的关系，系关系已经建立所以转化的到1个关系模式：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">关系<span class="number">1</span>：教师（工作证号，姓名，职称，电话，系代号，登入密码） 系代号设置为外键</span><br></pre></td></tr></table></figure></div>

<p>“班级”实体集和“学生”实体集也由“属于”联系关联，联系的基数是1：n，班级关系已经建立所以转化的到1个关系模式：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">关系<span class="number">1</span>：学生（学号，姓名，性别，出生年月，班号，登入密码） 班号设置为外键</span><br></pre></td></tr></table></figure></div>

<p>“课程”实体集和“教室”实体集为一对多（1：n）关系，可以再建立2个关系模型：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">关系<span class="number">1</span>：教室（教室号，层数，容纳人数，教室空间位置）</span><br><span class="line">关系<span class="number">2</span>：课程（课程号，课名，上课时间，课程性质，学分，名额，教室号） </span><br></pre></td></tr></table></figure></div>

<p>关系2课程中教室号、课程性质设置为外键<br>“学生”实体集和“课程”实体集由“选择”联系关联，为多对多（n:m）关系，可以再建立1个关系模型：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">关系<span class="number">1</span>：学生-课程（学号，课程号，成绩，重修标记）</span><br></pre></td></tr></table></figure></div>

<p>“教师”实体集和“课程”实体集为多对多关系，转化为1个关系模式：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">关系<span class="number">1</span>：教师-课程（工作证号，课程号）</span><br></pre></td></tr></table></figure></div>

<p>“课程”和“课程性质”为一对多关系，可以再建立1个关系模式：</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">关系<span class="number">1</span>：课程性质（课程性质）</span><br></pre></td></tr></table></figure></div>

<p>因为课程性质不需要进行数据维护，直接添加数据“基础必修”、“专业必修”、“选修”。</p>
<h2 id="4-物理设计"><a href="#4-物理设计" class="headerlink" title="4. 物理设计"></a>4. 物理设计</h2><p>数据库存储在通过Navicat 12 for SQLite创建的数据库中，空间数据也可以通过PostGIS将在ARCGIS中处理好导出的shp文件储存在pgADmin软件的postgreSQL数据库中（这部分在系统中并没有实现，看官们可以自行尝试，GeoSever等网站也可以尝试）。</p>
]]></content>
      <categories>
        <category>QT</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>【QT+SQLite】实现大学生课程学习管理与成绩评价系统（2）——数据库实现</title>
    <url>/2023/11/13/%E3%80%90QT-SQLite%E3%80%91%E5%AE%9E%E7%8E%B0%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AE%A1%E7%90%86%E4%B8%8E%E6%88%90%E7%BB%A9%E8%AF%84%E4%BB%B7%E7%B3%BB%E7%BB%9F%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>&emsp;&emsp;这是GIS系统可视化的第二篇文章，还没有看过第一篇<strong>系统整体设计</strong>的小伙伴可以在专栏里去寻找查阅，那么本篇文章将着重讲述数据库的设计和实现也就是SQLite的部分。</p>
<p>&emsp;&emsp;那么在最开始请允许我先介绍一下在此处用到的软件——Navicate for SQLite，先奉上官网[<a class="link"   href="https://www.navicat.com.cn/products/navicat-for-sqlite]%EF%BC%8C%E8%BD%AF%E4%BB%B6%E6%98%AF%E9%9C%80%E8%A6%81%E6%94%B6%E8%B4%B9%E7%9A%84%E9%82%A3%E4%B9%88%E5%B0%B1%E5%90%84%E6%98%BE%E7%A5%9E%E9%80%9A%E4%BA%86%E3%80%82Navicate" >https://www.navicat.com.cn/products/navicat-for-sqlite]，软件是需要收费的那么就各显神通了。Navicate <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for SQLite与一般的大型数据库比如SQL Sever相比最大的优点就是轻量级并且操作简便，相信你也会在接下来的学习和实操过程体会到这一区别。因为实习的特殊要求，我此处依旧使用了SQL语句来创建表、装入数据进行测试，下文中也会介绍更为简便的方式进行操作。</p>
<h2 id="1-编写模式"><a href="#1-编写模式" class="headerlink" title="1. 编写模式"></a>1. 编写模式</h2><p>&emsp;&emsp;那么接下来我们将按照功能设计时设计的表及字段进行数据库的闯创建，再次附上设E-R图。<br>&emsp;&emsp;第一步我们打开安装好的Navicate for SQLite软件，打开的界面如下，相比于SQL Sever非常的简洁，Navicate同款的for MySQL等兄弟也同样的简洁话少。<br>&emsp;&emsp;第二部打开左上角的连接，界面如下。我们需要新建一个连接，选择新建SQLite 3或者SQLite 2，再点击数据库文件这一行输入文件名并选择存储的位置。<br>&emsp;&emsp;那么这里我就直接打开我创建好的数据库进行演示啦，所有按需求建立的表如下图所示。<br>&emsp;&emsp;大家新建的数据库是没有任何表格的，别急我们用SQL语言来创建，点击数据库名称右键命令列界面输入SQL语句进行创建。SQL语句的语言规范大家可以自行Chat，此处不再赘述，我实习用到的SQL语句会随文附在文中。<br>&emsp;&emsp;简单来说，下面这段代码创建了一个名为STUDENT的表，并将学号也就是stu_num设置为逐渐，并设置班号也就是cl_num非空为必填空，并且为外键。这是我的设计，&#x3D;&#x3D;<strong>你或许会觉得我这样设计是不对的，那么没关系你可以按照自己的想法来设计这些表，要相信自己的想法肯定是对的</strong>&#x3D;&#x3D;。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> STUDENT</span><br><span class="line">(</span><br><span class="line">&quot;stu_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">PRIMARY</span> KEY, <span class="comment">--学号</span></span><br><span class="line">&quot;stu_name&quot; TEXT, <span class="comment">--姓名</span></span><br><span class="line">&quot;stu_gender&quot; TEXT, <span class="comment">--性别</span></span><br><span class="line">&quot;birth_year&quot; <span class="type">INT</span>, <span class="comment">--出生年份</span></span><br><span class="line">&quot;birth_month&quot; <span class="type">INT</span>, <span class="comment">--出生月份</span></span><br><span class="line">&quot;cl_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--班号</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(&quot;cl_num&quot;) <span class="keyword">REFERENCES</span> CLASS(&quot;cl_num&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;其他的表不一一解释了，相信大家能够看得懂其中的含义，还是重申大家要自己设计这些表，此处的代码仅代码我自己的想法。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEACHER</span><br><span class="line">(</span><br><span class="line">&quot;te_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">PRIMARY</span> KEY, <span class="comment">--工作证号</span></span><br><span class="line">&quot;te_name&quot; TEXT, <span class="comment">--姓名</span></span><br><span class="line">&quot;te_title&quot; TEXT, <span class="comment">--职称</span></span><br><span class="line">&quot;te_tel&quot; TEXT, <span class="comment">--电话</span></span><br><span class="line">&quot;de_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">--所属系代号</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(&quot;de_num&quot;) <span class="keyword">REFERENCES</span> DEPARTMENT(&quot;de_num&quot;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPARTMENT</span><br><span class="line">(</span><br><span class="line">&quot;de_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">PRIMARY</span> KEY, <span class="comment">--系代号</span></span><br><span class="line">&quot;de_name&quot; TEXT, <span class="comment">--系名</span></span><br><span class="line">&quot;de_tel&quot;<span class="type">CHAR</span>(<span class="number">60</span>),  <span class="comment">--系办公室电话</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> LESSON</span><br><span class="line">(</span><br><span class="line">&quot;le_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">PRIMARY</span> KEY, <span class="comment">--课程号</span></span><br><span class="line">&quot;le_name&quot; TEXT, <span class="comment">--课名</span></span><br><span class="line">&quot;le_type&quot; <span class="type">CHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--课程类型</span></span><br><span class="line">&quot;le_credit&quot; <span class="type">REAL</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--学分</span></span><br><span class="line">&quot;le_time&quot; TEXT, <span class="comment">--上课时间</span></span><br><span class="line">&quot;le_people&quot; <span class="type">BIGINT</span>, <span class="comment">--名额</span></span><br><span class="line">&quot;cr_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--教室号码</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(&quot;le_type&quot;) <span class="keyword">REFERENCES</span> Course_type(&quot;le_type&quot;),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(&quot;cr_num&quot;) <span class="keyword">REFERENCES</span> CLASSROOM(&quot;cr_num&quot;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--以通过选定课程，自动跳转所在教室位置，通过课程表查询教室空间位置</span></span><br><span class="line"><span class="comment">--录入课程信息时，通过交互平面图选择课程教室</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CLASSROOM</span><br><span class="line">(</span><br><span class="line">&quot;cr_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">PRIMARY</span> KEY, <span class="comment">--教室号码</span></span><br><span class="line">&quot;cr_floor&quot; <span class="type">INT</span>, <span class="comment">--层数</span></span><br><span class="line">&quot;cr_commit&quot; <span class="type">INT</span>, <span class="comment">--容纳人数</span></span><br><span class="line">&quot;cr_location&quot;  TEXT  <span class="comment">--教室空间位置，描述空间位置</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CLASS</span><br><span class="line">(</span><br><span class="line">&quot;cl_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">&quot;de_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(&quot;de_num&quot;) <span class="keyword">REFERENCES</span> DEPARTMENT(&quot;de_num&quot;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> StuL</span><br><span class="line">(</span><br><span class="line">&quot;stu_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) , <span class="comment">--学号</span></span><br><span class="line">&quot;le_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">--课程号</span></span><br><span class="line">&quot;course&quot; <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--成绩</span></span><br><span class="line">&quot;make_up&quot; <span class="type">CHAR</span>(<span class="number">12</span>), <span class="comment">--是否补考</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (&quot;stu_num&quot;,&quot;le_num&quot;),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(&quot;stu_num&quot;) <span class="keyword">REFERENCES</span> STUDENT(&quot;stu_num&quot;),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(&quot;le_num&quot;) <span class="keyword">REFERENCES</span> LESSON(&quot;le_num&quot;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TC</span><br><span class="line">(</span><br><span class="line">&quot;te_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) , <span class="comment">--工作证号</span></span><br><span class="line">&quot;le_num&quot;<span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">--课程号</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (&quot;te_num&quot;,&quot;le_num&quot;),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(&quot;te_num&quot;) <span class="keyword">REFERENCES</span> TEACHER(&quot;te_num&quot;),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(&quot;le_num&quot;) <span class="keyword">REFERENCES</span> LESSON(&quot;le_num&quot;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course_type</span><br><span class="line">(</span><br><span class="line">&quot;le_type&quot; <span class="type">CHAR</span>(<span class="number">32</span>) <span class="keyword">PRIMARY</span> KEY</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Meancourse</span><br><span class="line">(</span><br><span class="line">&quot;stu_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) , <span class="comment">--学号</span></span><br><span class="line">&quot;stu_name&quot; TEXT, <span class="comment">--学生姓名</span></span><br><span class="line">&quot;cl_num&quot; <span class="type">CHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--班号</span></span><br><span class="line">&quot;meancourse&quot; <span class="type">REAL</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--平均学分绩点</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (&quot;stu_num&quot;),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(&quot;stu_num&quot;) <span class="keyword">REFERENCES</span> STUDENT(&quot;stu_num&quot;),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(&quot;cl_num&quot;) <span class="keyword">REFERENCES</span> CLASS(&quot;cl_num&quot;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;那么接下来由繁入简，介绍更简单直观的操作方法，直接点击鼠标就能够实现操作。<br>&emsp;&emsp;如下图，右键表新建表你就会跳转到设计表的界面，然后…<br>&emsp;&emsp;然后你就能看到你所有想要的操作了。嗯对，就是这么简单，这就是Navicate相比传统的数据库软件最大的好处。字段的增减和属性设置全在这啦。</p>
<h2 id="2-数据载入"><a href="#2-数据载入" class="headerlink" title="2. 数据载入"></a>2. 数据载入</h2><p>&emsp;&emsp;那么接下来我们往Navicate中装入数据，同样由繁入简（毕竟课设最大的目的是SQL语句，啊吧啊吧~），先介绍SQL语句装入方式，同样是在命令列界面中，输入SQL语句来执行，代码附上。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course_type</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;基础必修&#x27;</span>),</span><br><span class="line">( <span class="string">&#x27;专业必修&#x27;</span>),</span><br><span class="line">( <span class="string">&#x27;专业选修&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPARTMENT(&quot;de_num&quot;,&quot;de_name&quot;)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;D11&#x27;</span>,<span class="string">&#x27;地理系&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;D12&#x27;</span>,<span class="string">&#x27;空间信息系&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CLASS(&quot;cl_num&quot;,&quot;de_num&quot;)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;114211&#x27;</span>,<span class="string">&#x27;D12&#x27;</span>),</span><br><span class="line">( <span class="string">&#x27;114212&#x27;</span>,<span class="string">&#x27;D12&#x27;</span>),</span><br><span class="line">( <span class="string">&#x27;114213&#x27;</span>,<span class="string">&#x27;D12&#x27;</span>),</span><br><span class="line">( <span class="string">&#x27;114214&#x27;</span>,<span class="string">&#x27;D12&#x27;</span>),</span><br><span class="line">( <span class="string">&#x27;118211&#x27;</span>,<span class="string">&#x27;D11&#x27;</span>),</span><br><span class="line">( <span class="string">&#x27;118212&#x27;</span>,<span class="string">&#x27;D11&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>&emsp;&emsp;那么成功创建并增加了数据后数据库中各关系的情况如下，分别为系、班级、学生、教师、课程、教室、课程性质、学生-课程、教师-课程的关系模式。<br>&emsp;&emsp;那么简单方法也是在设计表的界面直接点的行列进行输入。<br>&emsp;&emsp;好了到这里数据库的表和内容就已经全部实现了，还有一些其他的功能，比如说查询、索引、触发器，也是可以直接通过Navicate来实现的，还有就是自动运行，可以设置数据备份，防止数据不小心删除了。</p>
]]></content>
      <categories>
        <category>QT</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>【Arcpy】栅格数据的批量镶嵌和上传切片</title>
    <url>/2024/03/14/%E3%80%90Arcpy%E3%80%91%E6%A0%85%E6%A0%BC%E6%95%B0%E6%8D%AE%E7%9A%84%E6%89%B9%E9%87%8F%E9%95%B6%E5%B5%8C%E5%92%8C%E4%B8%8A%E4%BC%A0%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<p>&emsp;&emsp;这是Arcpy系列的第一篇文章，首先要先介绍一下Arcpy的来源与功能。</p>
<h2 id="0-缘起"><a href="#0-缘起" class="headerlink" title="0. 缘起"></a>0. 缘起</h2><p>&emsp;&emsp;Arcpy是ArcGIS或者ArcGIS Pro中的一个Python模块，它提供了对ArcGIS功能的Python编程访问，允许用户通过Python脚本自动执行GIS分析、数据处理、地图制作等任务。arcpy模块使得用户能够在ArcGIS环境中编写脚本，利用强大的地理处理功能进行空间数据管理和分析。它提供了各种工具和函数，可用于读取、编辑、转换和分析地理空间数据，包括矢量数据（如点、线、面）和栅格数据（如影像、DEM）等。<br>&emsp;&emsp;在ArcGIS中使用的是较为古早的Python2.7版本，ArcGIS Pro中使用的是较新的Python3.9版本，同时在今天要使用到的ArcGIS Server中也提供了Arcpy的功能调用。<br>&emsp;&emsp;Arcpy的使用方法比较多，可以直接在ArcGIS软件中进行使用，或者使用掉包的方式在Vs Code或者PyCharm等编译器中进行使用，鄙人更推荐后者，方便在代码编写过程中进行调试和纠错，更直观方便一些。</p>
<h2 id="1-实现"><a href="#1-实现" class="headerlink" title="1. 实现"></a>1. 实现</h2><p>&emsp;&emsp;本文要实现的功能是将一个文件夹中的栅格数据进行批量镶嵌再上传至ArcGIS Server中并进行切片。<br>&emsp;&emsp;那么接下来讨论一下实现思路，分为<strong>镶嵌</strong>和<strong>上传切片</strong>两部分。<br>&emsp;&emsp;镶嵌前需要先进行栅格数据的投影，分别使用到了ProjectRaster_management和MosaicToNewRaster_management两个函数进行使用。<br>&emsp;&emsp;上传切片部分使用了ArcGIS Server 10.2 的版本（这个版本与ArcGIS 10.8并不兼容，所以不能同时存在在一台电脑中），需要先通过CreateGISServerConnectionFile函数与Server 创建连接生成一个ags文件，再使用CreateImageSDDraft、AnalyzeForSD、UploadServiceDefinition_server三个函数分别直行创建服务定义草稿文件、错误分析和发布的任务；发布成功后再进行切片，CreateMapServerCache_server和ManageMapServerCacheTiles_server实现了这个功能。<br>&emsp;&emsp;Arcpy中的功能和在ArcGIS中操作是相似的，你可以理解为ArcGIS软件中的面板是对函数的调用而每填入的输入框就是函数的参数，这样能有助于ArcPy代码的编写，同时这是基于此Arcpy的好处就是批量的直行这点类似于模型构建器，也就是直行循环，在需要重复进行计算时比较方便。</p>
<h2 id="2-部分代码"><a href="#2-部分代码" class="headerlink" title="2. 部分代码"></a>2. 部分代码</h2><p>&emsp;&emsp;栅格数据合并的代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 栅格数据合并</span></span><br><span class="line">mosaic_dataset_name = <span class="string">&quot;MergedRaster.tif&quot;</span>  <span class="comment"># 不能超过13个字符</span></span><br><span class="line">mosaic_dataset_path = arcpy.os.path.join(output_filepath, mosaic_dataset_name)</span><br><span class="line"><span class="comment"># 传入参数分别为待合并的栅格数据集、合并后栅格数据集的输出工作空间、合并后的栅格数据集的名称、输出栅格数据集的坐标系统、输出栅格数据集的像素类型、输出栅格数据集的像素大小、输出栅格数据集的波段数、合并栅格数据集的方法、合并颜色表的模式</span></span><br><span class="line">arcpy.MosaicToNewRaster_management(raster_list, output_filepath, mosaic_dataset_name, out_coordinate_system,</span><br><span class="line">                                   <span class="string">&#x27;16_BIT_SIGNED&#x27;</span>, <span class="string">&#x27;250&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;LAST&#x27;</span>, <span class="string">&#x27;FIRST&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Raster datasets merged successfully.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上传至ArcGIS Server的代码如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">sddraftname = <span class="string">&#x27;servercon.sddraft&#x27;</span></span><br><span class="line">sddraft_path = arcpy.os.path.join(env.workspace, sddraftname)</span><br><span class="line">servicename = <span class="string">&#x27;tif&#x27;</span></span><br><span class="line">sdname = <span class="string">&#x27;servercon.sd&#x27;</span></span><br><span class="line">sdname_path = arcpy.os.path.join(env.workspace, sdname)</span><br><span class="line">foldername = <span class="string">&#x27;tif&#x27;</span></span><br><span class="line">sddraft = arcpy.CreateImageSDDraft(mosaic_dataset_path, sddraft_path, servicename, <span class="string">&#x27;ARCGIS_SERVER&#x27;</span>, ags_path, <span class="literal">False</span>, foldername)</span><br><span class="line"><span class="comment"># sddraft = arcpy.mapping.CreateMapSDDraft(mxd_path, sddraft_path, servicename, &#x27;ARCGIS_SERVER&#x27;, servercon, False, foldername)  # 创建服务定义草稿文件</span></span><br><span class="line">analysis = arcpy.mapping.AnalyzeForSD(sddraft_path)</span><br><span class="line"><span class="comment"># 查看分析结果中的错误消息</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> analysis[<span class="string">&#x27;messages&#x27;</span>].iteritems():</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">    <span class="keyword">for</span> subvalue <span class="keyword">in</span> value:</span><br><span class="line">        <span class="built_in">print</span>(subvalue[<span class="string">&#x27;description&#x27;</span>])</span><br><span class="line"></span><br><span class="line">arcpy.StageService_server(sddraft_path, sdname_path)  <span class="comment"># 将服务定义草稿(.sddraft) 转换为服务定义(.sd)文件</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    arcpy.UploadServiceDefinition_server(sdname_path, ags_path)  <span class="comment"># 发布服务</span></span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line">    <span class="built_in">print</span> e.message</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Arcpy</category>
        <category>ArcGIS</category>
      </categories>
      <tags>
        <tag>Arcpy</tag>
      </tags>
  </entry>
  <entry>
    <title>【QT+SQLite】实现大学生课程学习管理与成绩评价系统（3）——代码编写</title>
    <url>/2024/03/14/%E3%80%90QT-SQLite%E3%80%91%E5%AE%9E%E7%8E%B0%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AE%A1%E7%90%86%E4%B8%8E%E6%88%90%E7%BB%A9%E8%AF%84%E4%BB%B7%E7%B3%BB%E7%BB%9F%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h2 id="1-整体设计"><a href="#1-整体设计" class="headerlink" title="1.	整体设计"></a>1.	整体设计</h2><p>可视化界面设计：<br>&emsp;&emsp;本系统的可视化界面主要显示在MainWindow.ui创建的主窗口上，通过stackedWidget实现不同功能显示在不同页面的分页功能，利用tableWidget显示查询得到的数据；利用pushButton创建槽函数实现鼠标点击实现增加数据、删除数据、修改数据的功能；利用lineEdit、comboBox控件获取用户输入的信息实现增加、修改数据。<br>&emsp;&emsp;stackedWidget控件创建的pagetwo_1作为学生基本信息查询界面，pagetwo_2作为学生选课及成绩录入界面，pagetwo_3作为学生学业情况查询界面，pagetwo_4作为教师授课情况查询界面，pagetwo_5作为课程信息查询及录入界面，pagetwo_6作为系、班级信息查询界面，pagetwo_7作为教师基本信息查询界面；pagethree_1作为学生选课的界面。<br>&emsp;&emsp;同时在主窗口之外也新建了page_register.ui界面用于显示登录界面，区分是学生登入还是教师登入，并且学生登入时需要输入学号用于选课；新建了choose_tea.ui界面用于选择功能，学生登入和教师登入时可选择的功能也有不同，这样也可以保证数据库的安全性；dialog_addstu.ui界面和dialog_updatestu.ui界面分别用于增加和修改学生基础信息；map1.ui界面用于显示校园地图和实现最短路径的查询和教学设施的地图查询；map_class.ui界面录入课程信息时通过教学楼交互平面图选择课程教室；map_class2.ui界面用于实现通过在主窗口选定课程，自动显示所在教室位置的功能。<br>头文件与cpp文件：<br>&emsp;&emsp;MainWindow.h、page_register.h、choose_tea.h、dialog_addstu.h、dialog_updatestu.h、map1.h、map_class.h、map_class2.h、stu_code.h及其cpp文件均主要实现对应ui界面中的数据操作功能，在头文件和cpp文件中利用C++语言编写代码实现界面中需要的功能。map_struct.h设计用于编写空间数据的类及无向图的类，system.h及其cpp文件用于连接数据库已经实现对数据库中相应数据的增加、删除、修改以及查询和成绩到绩点的换算的功能。Mainwindow.cpp文件中利用指针实现对system.cpp文件中函数的调用，完成对数据库的维护和查询，并在主窗口中显现查询的数据或者通过pushButton的槽函数维护数据。</p>
<ol start="2">
<li>   连接数据库<br>&emsp;&emsp;该文件中编写的代码主要用于实现数据库的连接和实现对数据库中数据的增加、删除、修改和查询。</li>
</ol>
<p>&emsp;&emsp;因为本系统需要利用可视化图形界面来实现数据的查询和维护，所以采用QT来进行编写代码，利用QT 5.9.0 MinGW 32bit作为构建套件进行构建和运行，利用Navicat 12 for SQLite创建数据库并连接到QT中。在system.cpp文件中函数void init()用于连接Navicat 12 for SQLite中创建的数据库，通过包含头文件QSqlDatabase库并利用函数来实现连接。<br>&emsp;&emsp;调用addDatabase()函数初始化，利用setDatabaseName()函数告知数据库文件的地址及名字，调用sqllinfo()函数连接数据库，并且执行QString sql &#x3D; “PRAGMA foreign_keys &#x3D; ON;”打开SQLite默认关</p>
<h2 id="3-登入验证"><a href="#3-登入验证" class="headerlink" title="3.	登入验证"></a>3.	登入验证</h2><p>&emsp;&emsp;在stu_code.h中定义了init()函数连接数据库、QString getstucode(QString stu_num)获取学生密码和QString gettecode(QString te_num）获取教师密码，并在page_register.cpp中利用if函数进行判断，判断输入正确后发送信号跳转页面。</p>
<h2 id="4-学生基础信息查询和维护："><a href="#4-学生基础信息查询和维护：" class="headerlink" title="4.	学生基础信息查询和维护："></a>4.	学生基础信息查询和维护：</h2><p>&#x3D;&#x3D;查询学生基础信息：&#x3D;&#x3D;<br>&emsp;&emsp;在system.h中定义了struct类stuinfo用于存储和区分从数据库中获取的单条数据的数据项，并定义了   quint32 getstudentnum()函数用于查询数据库存储有的学生基础信息的元组数，定义了QList<stuinfo> getstu()函数用于获取所有学生基础信息的数据。<br>quint32 getstudentnum()函数执行了嵌入式SQL语句sql.exec(“SELECT COUNT(‘student_number’) FROM STUDENT;”)，并把得到的内容转化为整型返回。<br>&emsp;&emsp;QList<stuinfo> getstu()函数定义了stuinfo类型的数组，利用next()和while循环逐条遍历嵌入式SQL语句sql.exec(“SELECT STUDENT.*,CLASS.de_num FROM STUDENT LEFT OUTER JOIN CLASS ON (STUDENT.cl_num&#x3D;CLASS.cl_num) ORDER BY stu_num ASC;”)从数据库中获取的数据存入stuinfo类型的数组中。<br>&emsp;&emsp;在MainWindow.h中总共定义了void showbasedata()函数用于查询学生基础信息和在更新数据后更新显示的数据；在showbasedata()函数中利用了setHorizontalHeaderLabels()函数设置了对应界面中的tableWidget的表头，利用了etSelectionBehavior（）、setEditTriggers(）完成选中一行数据的功能；利用声明的system类的指针ptrsystem调用在system.h中声明的函数getstudentnum()从数据库中获取所有的学生基础信息的数量，设置为tableWidget的行数，以及调用在system.h中声明的函数getstu()从数据库中获取所有的学生基础信息并赋值给stuinfo类型的数组lStudents；再利用for循环把lStudents中的数据遍历输出到对应的tableWidget中。<br>&#x3D;&#x3D;增加学生基础信息：&#x3D;&#x3D;<br>&emsp;&emsp;在system.h中定义了bool addstu(stuinfo info)用于增加学生基础信息，通过MainWindow.cpp传入一条stuinfo类型的数据后，执行嵌入式SQL语句INSERT INTO STUDENT VALUES(‘%1’,’%2’,’%3’,%4,%5,’%6’)，利用,arg()填充内容。再通过判断exec()是否正确执行，进行qDug()错误检验。<br>在MainWindow.h定义了槽函数void on_addstu_button_clicked()用于调用exec()函数转到dialog_addstu.ui创建的数据增加页面，该界面会给用户提供输入学生基础信息的控件。<br>&emsp;&emsp;在dialog_addstu.h中定义了槽函数void on_pushButton_clicked()和void on_pushButton_2_clicked()分别用于保存需要添加的学生基础信息和退出该界面。void on_pushButton_clicked()函数先通过if函数保证了用户在输入信息时没有遗漏学生姓名和班级信息，在保证信息均输入之后从界面中添加的LineEdit、comboBox控件中获取信息赋给stuinfo类型的变量stu,再利用system类的指针调用addstu()函数实现在数据库中增加信息。同时也定义了void addstu_clear()函数，在按下界面中的pushButton控件后能清空lineEdit控件中的数据和使comboBox中的数据回到第一个值。<br>增加完成后调用showbasedata()函数重新查询数据。</p>
<p>&#x3D;&#x3D;删除学生信息：&#x3D;&#x3D;<br>&emsp;&emsp;在这里设置两种删除方式，删除单条数据和删除全部数据，所以添加了checkBox控件，用户选择就进行删除全部数据。<br>所以在system.h中定义了两个函数bool delstu(QString id)用于删除单条数据和函数void emptystutable(）删除全部学生数据。bool delstu(QString id)函数通过输入的学生学号，执行嵌入式SQL语句DELETE FROM STUDENT WHERE stu_num &#x3D; ‘%1’，并利用.arg()输入学号，同样利用qDug()判断是否成功执行。void emptystutable(）执行了”DELETE FROM STUDENT”SQL语句，执行后同样利用qDug()判断是否成功执行。<br>在MainWindow.h定义的槽函数void on_delstu_button_clicked()中，利用if函数判断checkBox控件是否选中，选中则调用emptystutable(）函数，没有选中则利用currentRow()取出当前行的索引再利用item()函数取出当前行的学生学号，再调用delstu()函数传入学生学号。<br>&emsp;&emsp;删除完成后调用showbasedata()函数重新查询数据。</p>
<p>&#x3D;&#x3D;修改学生信息：&#x3D;&#x3D;<br>&emsp;&emsp;在实现修改学生信息时代码编写的方式同增加学生信息时相似，通过在主窗口中的pushButton控件触发槽函数void on_updatestu_button_clicked()，显现dialog_updatestu.ui创建的ui界面，通过修改界面的pushButton触发槽函数void on_pushButton_clicked()，调用system.h定义的void updatestuinfo(stuinfo info)函数执行UPDATE STUDENT SET stu_name&#x3D;’%1’,stu_gender&#x3D;’%2’,birth_year&#x3D;%3,birth_month&#x3D;%4,cl_num&#x3D;’%5’ WHERE stu_num&#x3D;’%6’，利用.arg()填入要修改的内容，利用主键学生学号作为条件。通过返回的pushButton触发槽函数void on_pushButton_2_clicked()，调用hide()函数关闭修改界面。每次按下保存和返回pushButton时，都会调用void updatestu_clear()函数清空用户输入或选择的内容。<br>&emsp;&emsp;修改完成后调用showbasedata()函数重新查询数据。</p>
<p>&#x3D;&#x3D;搜索学生信息：&#x3D;&#x3D;<br>&emsp;&emsp;学生信息按班级或系代号搜索主要通过对获取的所有学生信息进行遍历对比再重新输出到对应的界面中的tableWidget中。槽函数void on_searchButton_clicked()触发后，在判断搜索条件非空的情况下，重新利用setHorizontalHeaderLabels()等函数设置tableWidget的格式和选中整行，再调用getstu()函数获取所有数据，利用for循环把满足contains()函数的数据及一条数据中班级项中包含搜索条件或是系代号项包含搜索条件的数据输出到tablWidget中。</p>
<p>&emsp;&emsp;下图是学生基础信息查询和维护界面的功能实现的主要函数调用示意图：</p>
<h2 id="5-学生选课信息查询和维护："><a href="#5-学生选课信息查询和维护：" class="headerlink" title="5.	学生选课信息查询和维护："></a>5.	学生选课信息查询和维护：</h2><p>&emsp;&emsp;在system.h中定义了struct courseinfo类用于存储本功能需要的数据库中的数据，在类中定义了QString course_stunumber用于存储学生学号，QString course_stuname用于存储学生姓名，QString course_lename用于存储课程名称，QString course_lenumber用于存储课程号，quint16 course_course用于存储课程成绩，qreal course_grpoint用于存储课程绩点，QString make_up作为重修标记。</p>
<p>&#x3D;&#x3D;查询学生选课和成绩信息：&#x3D;&#x3D;<br>&emsp;&emsp;该功能的实现与学生基础信息查询的实现类似，在MainWindow.h中定义void showcoursedata()用于显现学生选课情况，先设置表的标头以及选中行，再调用system类的指针调用quint32 getcoursenum()用于指定行数，再调用system类的指针调用QList<courseinfo> getcourse()，返回在system.h中定义的courseinfo类的数组，通过for循环把获取的courseinfo类的数组中的数据输出到本界面对应的tablewidget中。<br>&emsp;&emsp;同时定义了showcoursedata_else()函数来往界面中的comboBox控件中添加数据库中提取的相应的内容，先调用getstu()函数获取所有的学生数据再遍历把所有的学生姓名加入控件中，在是否重修的comboBox控件中利用addItem(）分别添加字符串“是”和“否”，调用getlesson_number()获取数据，把课程号加入控件中。</p>
<p>&#x3D;&#x3D;增加学生选课和成绩信息：&#x3D;&#x3D;<br>&emsp;&emsp;该功能同样与学生基础信息增加的实现类似，在MainWindow.h中通过槽函数void on_addcourse_button_clicked()利用system类指针调用system.h中定义的bool coursestu(courseinfo info)，传入从界面上获取的数据，执行嵌入式SQL语句INSERT INTO StuL VALUES(‘%1’,’%2’,%3,’%4’)增加学生选课信息。最后调用choose_clear()清空所有用户输入或者选择的内容。最后再调用showcoursedata()和showcoursedata_else()显示界面中的数据和其他内容。</p>
<p>&#x3D;&#x3D;删除学生选课和成绩信息：&#x3D;&#x3D;<br>&emsp;&emsp;该功能同样与学生基础信息删除的实现类似，在MainWindow.h中通过槽函数void on_delcourse_button_clicked()先利用currentRow()获取当前行索引，再item(i,0)和item(i,2)分别获取学生学号和课程号，再调用delcourse（），传入学号和课程号，执行嵌入式SQL语句DELETE FROM StuL WHERE stu_num &#x3D; ‘%1’ AND le_num&#x3D;’%2’，利用.arg()填入学号和课程号，最后调用showcoursedata()重新查询并显现数据。<br>修改学生选课和成绩信息：<br>&emsp;&emsp;该功能同样与学生基础信息修改的实现类似，在MainWindow.h中通过槽函数void on_updatecourse_button_clicked()，利用courseinfo类变量记录从界面中获取的修稿修改的数据，再调用void updatecourseinfo(courseinfo info)函数，传入courseinfo类变量，执行UPDATE StuL SET course&#x3D;’%1’,make_up&#x3D;’%2’ WHERE stu_num&#x3D;’%3’ AND le_num &#x3D;’%4’<br>，填入courseinfo类变量中的数据，调用完成后再调用course_clear()函数清空用户输入或者选择的内容。最后调用showcoursedata()和showcoursedata_else()显示界面中的数据和其他内容。</p>
<p>&emsp;&emsp;下图是学生选课信息查询和维护界面的功能实现的主要函数调用示意图：</p>
<h2 id="6-学生学业信息查询："><a href="#6-学生学业信息查询：" class="headerlink" title="6.	学生学业信息查询："></a>6.	学生学业信息查询：</h2><p>&emsp;&emsp;在system.h中定义了struct stucoinfo类用于存储在实现本功能时需要的数据库中的数据，在类中定义了QString course_stunumber用于存储学生学号，QString course_stuname用于存储学生姓名，qreal meancourse用于存储学生平均学分绩点，QString course_class用于存储班级均分，quint16 course用于存储学生成绩，QString le_type用于存储课程类型，QString make_up是重修的标记，qreal credit为课程学分，QString StuL_stunumber是StuL模式中存储的学生数量。<br>该功能的实现需要借助于预先创建好的数据库meancourse用于存储计算和分组排序后得到的学生学业信息的汇总情况。<br>在system.h中定义了QList<stucoinfo> getstuco()用于获取学业信息并按班级分组，该函数<br>&emsp;&emsp;先利用QList<stucoinfo> stuco_l变量通过循环遍历存储SELECT stu_num,stu_name,cl_num FROM STUDENT嵌入式SQL语句执行得到的学生数据，再利用QList<stucoinfo> stuco_co变量也通过循环遍历存储SELECT stu_num,course,make_up,le_type,le_credit FROM StuL,LESSON WHERE StuL.le_num&#x3D;LESSON.le_num AND course!&#x3D;’null’嵌入式SQL语句得到的学号、成绩、重修标记、课程性质、学分数据。<br>&emsp;&emsp;再通过循环遍历，每次用stuco_l的一条数据遍历寻找学生学号相同的stuco_co变量中的数据，找到相同的学生学号数据则对定义的用于记录学分的整型变量credit加上对应的学分，同时也对定义的用于记录课程学分<em>课程学分绩点的整型变量credit_min加上经过换算的数值，换算规则为课程性质为基础必修：课程权重系数1.2</em>绩点<em>课程学分，专业必修程权重系数1.1</em>绩点<em>课程学分，选修程权重系数1</em>绩点*课程学分，每次遍历把得到的数据存储到定义的QList<stucoinfo> scourse_stu数组中，并且通过执行INSERT INTO Meancourse VALUES(‘%1’,’%2’,’%3’,%4)语句把数据存储进meancourse数据库中。<br>&emsp;&emsp;定义的 QList<stucoinfo> getstucodata()用于从meancourse数据库中获取计算后的学分信息并排序，执行的SQL语句为SELECT * from Meancourse ORDER BY cl_num ASC,meancourse DESC。<br>当打开本界面查询学生学业成绩时，connect()函数会调用void showstucodata()函数来显示数据，定义的showstucodata()函数调用了getstucodata()获取分区排序好的数据数组，利用for循环遍历输出至本界面的tableWidget中。<br>&emsp;&emsp;而定义的on_pushButton_6_clicked()槽函数，则会调用system.h中定义的void addcourse()函数把排序好的数据再次输出进数据库的meancourse中。addcourse()先调用emptycourse()函数执行DELETE FROM Meancourse语句清空数据库，清空结束后利用for循环多次执行INSERT INTO Meancourse VALUES(‘%1’,’%2’,’%3’,%4)语句，从定义的QList<stucoinfo> scourse_stu数组中获取调用getstucodata()函数获得的数据，按行增加进入数据库。</p>
<p>&emsp;&emsp;下图是学生学业情况查询界面的功能实现的主要函数调用示意图：</p>
<h2 id="7-系、班级信息的维护和查询"><a href="#7-系、班级信息的维护和查询" class="headerlink" title="7. 系、班级信息的维护和查询"></a>7. 系、班级信息的维护和查询</h2><p>&emsp;&emsp;在system.h中定义了struct department类，在该类中定义了5个字符串型变量department_number、department_name、department_tel、department_class、department_number_cl分别用于存储系代号、系名、系办公室电话、班级、班级个数。<br>查询系、班级的信息：<br>&emsp;&emsp;在system.h中定义int getdenum()函数用于系数量的查询和QList<department> getde()函数用于获取所有数据。getdenum()函数执行了嵌入式SQL语句SELECT COUNT(‘cl_num’) FROM DEPARTMENT,CLASS WHERE DEPARTMENT.de_num&#x3D;CLASS.de_num返回了把“系”关系模式和“班级”关系模式进行等值连接后的“班级”属性分量个数。getde()函数则返回了把“系”关系模式和“班级”关系模式进行等值连接后的所有数据，利用定义的QList<department>类型数组进行存储。<br>在MainWindow.h中定义了void showdedata()函数用于在本界面的tableWidget中显示数据,<br>&emsp;&emsp;利用setColumnCount()、setHorizontalHeaderLabels()函数设置表头，setRowCount()设置getdenum()函数的返回值为行数，再利用for循环遍历每行输出至tableWidget中。</p>
<p>&#x3D;&#x3D;增加系、班级的信息：&#x3D;&#x3D;<br>&emsp;&emsp;本功能利用在MainWindow.h中创建的槽函数void on_pushButton_add26_clicked()在用户输入的系代号不为空的情况下，利用system.h中定义的指针调用 void addde(department info)函数，利用department info传入用户输入的信息。当增加的信息中的系不存在时执行SQL语句INSERT INTO DEPARTMENT VALUES(‘%1’,’%2’,’%3’)和INSERT INTO CLASS VALUES(‘%1’,’%2’)分别在系模式和班级模式中增加数据，当系存在时执行INSERT INTO CLASS VALUES(‘%1’,’%2’)语句只在班级模式中增加数据，最后调用showdedata()函数重新输出数据。<br>删除系、班级的信息：<br>&emsp;&emsp;本功能利用在MainWindow.h中创建的槽函数void on_pushButton_del26_clicked()，在利用currentRow()和item(）函数取出系代号和班级后调用bool delde(QString id,QString de_cl)函数，执行DELETE FROM CLASS WHERE de_num &#x3D; ‘%1’AND cl_num &#x3D; ‘%2’，之后利用getdecl()获取班级模式中的系代号数据遍历判断该系代号在班级表中是否存在，不存在时执行DELETE FROM DEPARTMENT WHERE de_num &#x3D; ‘%1’删除没有班级信息的系，最后调用showdedata()函数重新输出数据。<br>修改系、班级的信息：<br>&emsp;&emsp;本功能利用在MainWindow.h中创建的槽函数void on_pushButton_up26_clicked()调用void updatedeinfo(department info)函数传入用户输入的信息后执行UPDATE DEPARTMENT SET DE_NAME&#x3D;’%1’,DE_TEL&#x3D;’%2’ WHERE de_num&#x3D;’%3’修改信息，最后调用showdedata()函数重新输出数据。</p>
<h2 id="8-教师基本信息查询和维护："><a href="#8-教师基本信息查询和维护：" class="headerlink" title="8. 教师基本信息查询和维护："></a>8. 教师基本信息查询和维护：</h2><p>&emsp;&emsp;在system.h中定义了struct teacher类，该类定义了5个变量QString teacher_number用于存储教师工作证号，QString teacher_name用于存储教师姓名，QString teacher_title用于存储教师职称，QString teacher_tel用于存储教师电话，QString teacher_denum用于存储系代号。<br>查询教师基本信息：<br>&emsp;&emsp;本功能利用在MainWindow,h中定义的void showteacherdata()进行信息的查询和显示。showteacherdata()函数利用setColumnCount()、setHorizontalHeaderLabels()函数设置表头，setRowCount()设置quint32 getteachernum()函数的返回值为行数，再利用QList<teacher> getteanum()函数执行SELECT * FROM TEACHER ORDER BY te_num ASC返回的所有数据利用for循环输出到本界面中的tableWidget中。<br>增加教师基本信息：<br>&emsp;&emsp;本功能利用在MainWindow,h中定义的void on_pushButton_clicked()槽函数调用bool addteacher(teacher info)函数执行INSERT INTO TEACHER VALUES(‘%1’,’%2’,’%3’,’%4’,’%5’)语句增加教师基本信息。执行结束后调用void teacher_clear()清空输入内容和showteacherdata()函数重新查询并显示数据到本界面的tableWidget中。</p>
<p>&#x3D;&#x3D;删除教师基本信息：&#x3D;&#x3D;<br>&emsp;&emsp;本功能利用在MainWindow,h中定义的void on_pushButton_del_clicked()槽函数，在利用currentRow()和item(）函数取出教室号后调用 bool deltecher(QString id)执行DELETE FROM TEACHER WHERE te_num &#x3D; ‘%1’语句，最后调用showteacherdata()函数重新查询并显示数据到本界面的tableWidget中。</p>
<p>&#x3D;&#x3D;修改教师基本信息：&#x3D;&#x3D;<br>&emsp;&emsp;本功能利用在MainWindow,h中定义的void on_pushButton_up_clicked()槽函数，调用updateteacherinfo()函数执行UPDATE TEACHER SET te_name&#x3D;’%1’,te_title&#x3D;’%2’,te_tel&#x3D;’%3’,de_num&#x3D;’%4’ WHERE te_num&#x3D;’%5’<br>&emsp;&emsp;更新数据。执行结束后调用void teacher_clear()清空输入内容和showteacherdata()函数重新查询并显示数据到本界面的tableWidget中。</p>
<h2 id="9-课程信息查询和维护："><a href="#9-课程信息查询和维护：" class="headerlink" title="9. 课程信息查询和维护："></a>9. 课程信息查询和维护：</h2><p>&emsp;&emsp;在system.h中定义了struct lesson类用于存储课程模式中的数据，定义的QString lesson_number用于存储课程号、QString lesson_name用于村春课程名，QString lesson_type用于存储课程性质，qreal lesson_credit用于存储课程学分，QString lesson_time用于存储上课时间，quint16 lesson_people用于存储课程名额，QString lesson_cr用于存储教室号。<br>查询课程信息：<br>&emsp;&emsp;本功能利用在MainWindow,h中定义的void showlessondata()函数，先利用setColumnCount()、setHorizontalHeaderLabels()函数设置表头，setRowCount()设置quint32 getlenum()函数的返回值为行数，再调用QList<lesson> getlesson()函数执行SELECT * FROM LESSON ORDER BY le_num ASC获取所有课程信息，再利用for循环从QList<lesson>数组中逐行输出数据至tableWidget中。<br>同时定义了void showelsedata()函数用于显示界面中tableWidget外的内容。调用了getlesson_number()函数，执行SELECT DISTINCT le_num FROM LESSON ORDER BY le_num ASC语句获取课程号输出到comboBox中。</p>
<p>&#x3D;&#x3D;增加课程信息：&#x3D;&#x3D;<br>&emsp;&emsp;本功能利用在MainWindow,h中定义的on_pushButton_3_clicked()槽函数，在判断用户输入的课程号、课程名不为空的情况下调用 void addlesson(lesson info)函数，传入用户输入数据，执行SELECT cr_commit FROM CLASSROOM WHERE cr_num&#x3D;’%1’语句增加课程信息。执行结束后调用void lesson_clear()清空输入内容和showlessondata()函数重新查询并显示数据到本界面的tableWidget中。</p>
<p>&#x3D;&#x3D;删除课程信息：&#x3D;&#x3D;<br>&emsp;&emsp;本功能利用在MainWindow,h中定义的void on_pushButton_2_clicked()槽函数，利用currentRow()和item(）函数取出课程号后调用bool dellesson(QString id)执行DELETE FROM LESSON WHERE le_num &#x3D; ‘%1’语句删除指定元组，最后调用showlessondata()函数重新查询并显示数据到本界面的tableWidget中。</p>
<p>&#x3D;&#x3D;修改课程信息：&#x3D;&#x3D;<br>&emsp;&emsp;本功能利用在MainWindow,h中定义的void on_pushButton_4_clicked()槽函数，在用户输入课程名和学分的情况下调用 void updateleinfo(lesson info)函数执行SELECT cr_commit FROM CLASSROOM WHERE cr_num&#x3D;’%1’更新数据。执行结束后调用void lesson_clear()清空输入内容和void showlessondata()函数重新查询并显示数据到本界面的tableWidget中。</p>
<p>&#x3D;&#x3D;交互式选择教室：&#x3D;&#x3D;<br>&emsp;&emsp;此功能利用了MainWindow.h函数定义的void on_pushButton_10_clicked()槽函数，调用show()函数跳转到map_class.ui的界面。<br>&emsp;&emsp;在map_class.h中定义了void paintEvent(QPaintEvent *event)在界面中打印教学楼的平面图，target()函数设置了打印的位置和大小，QPixmap umap()函数记录了图片路径和名称，drawPixmap()函数实现了打印。定义的void mousePressEvent(QMouseEvent *event)鼠标左击事件，利用if函数判断鼠标在界面中点击的x坐标和y坐标，利用变量class_number记录教室号，利用变量class_num把教室号返回至主窗口中用于增加或修改信息时填入教室号。<br>&emsp;&emsp;定义的void on_pushButton_clicked()槽函数，调用了close()函数用于关闭界面。</p>
<p>&#x3D;&#x3D;显示教室位置：&#x3D;&#x3D;<br>&emsp;&emsp;此功能利用了MainWindow.h函数定义的void on_pushButton_9_clicked()槽函数，调用show()函数跳转到map_class2.ui的界面。同时利用了信号和槽传递了教室信息，在MainWindow.h中定义了void sendchoose_map_class(QString,QString)发送信号的同时传递楼层数和教室号，在map_class2.h中定义了getData(QString,QString)接收传递的数据，connect(this,SIGNAL(sendchoose_map_class(QString,<br>QString)),map_class2,SLOT(getData(QString,QString)))用于连接。<br>&emsp;&emsp;在map_class2.h中定义了void paintEvent(QPaintEvent *event)绘制事件，利用target()函数设置了打印的位置和大小，QPixmap umap()函数记录了图片路径和名称，drawPixmap()函数实现了显示公教一平面图和教室。同时定义了QPen pen和QBrush brush，调用if函数对传入的教室号进行判断，在不同的位置利用drawRect()绘制矩形。<br>&emsp;&emsp;定义的void closeEvent(QCloseEvent *event)函数为主窗口退出事件，利用QMessageBox，提示用户是否确定退出界面。</p>
<h2 id="10-教师授课信息查询："><a href="#10-教师授课信息查询：" class="headerlink" title="10. 教师授课信息查询："></a>10. 教师授课信息查询：</h2><p>&emsp;&emsp;在system.h中定义了struct teachinfo类用于存储教室-课程模式中和其他的数据， QString teacher_number时教师工作证号，QString teacher_name存储了教师姓名，QString teacher_tel存储了教师电话，String class_name存储了课程名，QString class_number存储了课程号，qreal lesson_credit存储了学分。<br>本功能利用在MainWindow,h中定义的void showteachdata()函数，先利用setColumnCount()、setHorizontalHeaderLabels()函数设置表头，setRowCount()设置quint32 getteale_num()函数的返回值为行数，再调用QList<teachinfo> getteale()函数执行SELECT * FROM TEACHER,TC,LESSON WHERE TEACHER.te_num&#x3D;TC.te_num AND TC.le_num&#x3D;LESSON.le_num AND TEACHER.te_num!&#x3D;’null’ ORDER BY TEACHER.te_num ASC存储数据至QList<teachinfo>数组中，再利用for循环逐行输出数据至本界面中的tableWidget中。<br>&emsp;&emsp;增加课程信息和删除课程信息代码同课程信息查询和维护相似。</p>
<h2 id="11-学生选课功能："><a href="#11-学生选课功能：" class="headerlink" title="11. 学生选课功能："></a>11. 学生选课功能：</h2><p>&emsp;&emsp;在本界界面中利用学生用户在登入界面输入的学号进行检索查询学生未选择的课程和已选择的课程，在MainWindow.h中定义了void showchoosedata()查询未被选择的课程和void showchoosendata()用于查询已经被选择的课。两函数均先利用setColumnCount()、setHorizontalHeaderLabels()函数设置表头。showchoosedata()函数再调用getunchooselesson()函数执行SELECT * FROM LESSON WHERE le_num NOT IN (SELECT le_num FROM StuL WHERE stu_num &#x3D; ‘%1’把获得的数据存储到QList<lesson>类型数组中，setRowCount()设置QList<lesson>类型数组的size()函数的返回值为行数，再通过for循环逐行输出至界面中对应的tableWidget。showchoosendata()函数再调用getchooselesson()函数执行SELECT * FROM LESSON WHERE le_num IN (SELECT le_num FROM StuL WHERE stu_num&#x3D;’%1’语句把获取的数据存储到QList<lesson>类型的数组中，setRowCount()设置QList<lesson>类型数组的size()函数的返回值为行数，最后也通过for循环逐行输出至界面中对应的tableWidget中。<br>&emsp;&emsp;void on_pushButton_5_clicked()用于用户点击删除已选择课程，利用currentRow()和item(）函数取出课程号，在保证用户选中对应tableWidget中的一行数据后调用bool delchoosele(QString id,QString number)函数传入学生学号和课程号执行DELETE FROM StuL WHERE stu_num&#x3D;’%1’ AND le_num &#x3D; ‘%2’语句删除数据。最后调用showchoosendata()和showchoosedata()重新查询和显示数据。<br>&emsp;&emsp;void on_pushButton_7_clicked()用于用户选择课程，利用currentRow()和item(）函数取出课程号，在保证用户选中对应tableWidget中的一行数据后调用bool addchoosele(QString id,QString number)函数传入学生学号和课程号执行INSERT INTO StuL(stu_num,le_num) VALUES (‘%1’,’%2’)增加数据。最后调用showchoosendata()和showchoosedata()重新查询和显示数据。<br>&emsp;&emsp;同时利用 QList<stuinfo> getstuname(QString stu_number)获取该学生基础信息后，利用void showstudata()显示在下方的文字区域。<br>定义的bool check(QString id)函数用于检查选课时没有超过名额，执行了SELECT COUNT(‘stu_num’) FROM StuL WHERE le_num&#x3D;’%1’和SELECT le_people FROM LESSON WHERE le_num&#x3D;’%1’语句，对比得到的数值，已选择课程人数小于名额时可以选课，在执行槽函数void on_pushButton_7_clicked()利用if函数进行保证。</p>
<h2 id="12-校园导航："><a href="#12-校园导航：" class="headerlink" title="12. 校园导航："></a>12. 校园导航：</h2><p>&emsp;&emsp;本功能利用map_struct.h中定义的struct arcell、struct vexsinfo、struct mgraph三个类，分别用于存储边、点、和无向图，在mgraph类中定义了adjmatrix arcs为表示邻接矩阵的数组，vexsinfo vexs[MaxVertexNum]为存储顶点的数组。本功能将把校园地图中的空间数据存储在这些类中利用佛洛依德算法计算最短路径。</p>
<p>&#x3D;&#x3D;最短路径查询：&#x3D;&#x3D;<br>&emsp;&emsp;本功能利用在Map1.h中定义的mgraph initgraph()函数录入校园中的所有点空间信息及x坐标和y坐标和名称，并构建边和无向图。在initgraph()函数先在vexsinfo vexs数组中添加顶点信息，先利用for循环创建所有点给与编号，再利用strcpy(）添加点的名称，PX为该点在界面中的x坐标，PY为该店在界面中的y坐标；并在adjmatrix arcs二维数组中存储各边的权值，没有连接的两点之间的边权值赋值为20000，并利用for循环进行对称赋值。<br>Map1.h中定义的void mousePressEvent(QMouseEvent *event)用于用户从地图中选择起点和终点，通过mapFromGlobal(QCursor().pos()).x()获取鼠标点击位置的x值，mapFromGlobal(QCursor().pos()).y()获取鼠标点击位置的y值,再通过if函数进行判断点击位置的点的编号，当界面中comboBox选择为起点时该店编号输出为起点编号，选择为终点时输出为终点编号。<br>&emsp;&emsp;void on_pushButton_clicked()槽函数用于获取起点和终点的编号，再调用shortdistance(campus, start, end)寻找最短路径。<br>void floyd(mgraph c)函数中利用了两个二维数组shortest[i][j]和pathh[i][j]。shortest[i][j]用于存储initgraph()函数中创建的无向图数组，pathh[i][j]用于记录i点和j点最短路径上的第二个点。本函数先利用for循环给hortest[i][j]赋值，再利用for循环进行最短路径计算，计算后shortest[i][j]记录为i和j点之间对端路径的长度，pathh[i][j]可以记录最短路径的经过点。<br>&emsp;&emsp;Shortdistance()函数先调用了void floyd(mgraph c)函数计算获得最短路径，再利用QT绘图的双缓冲机制，定义了QPixmap pix对象，再利用target()函数设置了打印的位置和大小，QPixmap umap()函数记录了图片路径和名称，drawPixmap()函数实现了显示校园地图，再定义 QPen pen画笔，通过while循环不断判断pathh[i][j]是否为终点的编号逐线段输出最短路径在pix上，最后利用update()触发void paintEvent(QPaintEvent *event)绘制事件重新绘制。</p>
<p>&#x3D;&#x3D;教学设施查询：&#x3D;&#x3D;<br>&emsp;&emsp;定义了void showlocation()用于教学设施的查询，同样通过双缓冲机制，先绘制在pix上最后用update()函数触发void paintEvent(QPaintEvent *event)绘制事件重新绘制。函数中通过对comboBox_2中用户选择内容的判断在不同位置绘制不同的图形，主要利用了drawRect（）绘制矩形、drawText（）绘制字和drawEllipse()绘制圆。</p>
<h2 id="13-界面跳转"><a href="#13-界面跳转" class="headerlink" title="13. 界面跳转"></a>13. 界面跳转</h2><p>&emsp;&emsp;编写代码时主要利用了两种方式来显示界面。第一种利用了信号和槽原理，通过emit发送定义的信号，并利用connect()接收，同时定义了auto类型指针实现规定跳转的界面和需要调用的函数。第二种通过包含对应ui界面的头文件创建对象直接调用show()或exec()函数实现画面跳转。<br>&emsp;&emsp;关闭界面时也定义了一些pushButton控件触发槽函数，进一步调用close()函数关闭界面。</p>
]]></content>
      <categories>
        <category>QT</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
</search>
